{"pages":[{"title":"about-me","text":"我也知道关于自己写点啥！！！","path":"about-me/index.html"},{"title":"categories","text":"categories: WEB CRYPTO writeup","path":"categories/index.html"},{"title":"tags","text":"tags: 学习总结 学习收藏 学习感悟","path":"tags/index.html"}],"posts":[{"title":"SESSION学习总结","text":"session在服务器端创建有两种情况，第一种是server端调用HttpServletRequest.getSession(true);第二种是访问jsp页面 参考文章：https://blog.csdn.net/u012554102/article/details/49454797 1.session在服务器端创建有两种情况，第一种是server端调用HttpServletRequest.getSession(true);第二种是访问jsp页面；第一种很容易理解，也是大家都比较熟悉的产生session的方式，关于第二种，看了一篇文章，很有感悟，jsp作为动态网页，本质是一个Servlet,编译后会与Server端交互，原因是jsp里有内置对象，这个对象就是和Server端交互的产物。 2.Session Cookie(会话Cookie)与Server端的Session同时产生，但是不同时消失，在浏览器关闭时，Session Cookie被销毁，但是Server Session并没有销毁，Server Session 销毁的方式有三种，一：在最大无活动等待时间内没有响应或请求；二：调用invalidate()方法；三:服务器挂了。 3.Session与Cookie基础知识：https://blog.csdn.net/gaoyong_stone/article/details/79524321","path":"2018/09/01/session学习总结/"},{"title":"RSA学习总结","text":"最近看了几篇RSA加密算法的相关文章，CTF中常见的几种和RSA有关的题目大多都有套路，下面趁写文章学习总结一波： 1.e较大：wiener攻击 解密代码链接https://codeload.github.com/pablocelayes/rsa-wiener-attack/zip/master 理论基础链接https://blog.csdn.net/oumeixi_wjp/article/details/44747329 这种攻击方法适合在知道e,n,a,m的情况下使用，e一般很大，这时通过a求出p,q，进而求d 2.e较小：直接开方 相关链接https://blog.csdn.net/jeffreynnn/article/details/77169723 有时数太大需要提高精度，安恒7月赛的writeup里有相关内容 3.低加密指数广播攻击：相同低指数的e和多个相同的消息m 相关链接https://blog.csdn.net/xuqi7/article/details/75578414 这种情况适合已知多组对应的c,n,同时已知m和e相同 4.coppersmith定理攻击：只有部分高位的p或q 相关链接https://www.52pojie.cn/thread-653446-1-8.html 这种攻击方法适合用OpenSSL只能分解出p的一部分的情况，具体如链接 5.共模攻击：相同n,相同m https://www.cnblogs.com/gwind/p/8013154.html 这种攻击方法适合已知n,以及互相对应的多对c,e,利用e1s1+e2s2 = 1，(c1^s1*c2^s2)%n = m^%n 这两个公式求出m，具体方法见链接。 6.已知dp的攻击:相关链接https://mp.weixin.qq.com/s/Mkkl_lXLlKJ70VzNVRqOTA 给定e,n,dp,c,dp≡d mod (p-1)经过复杂的推导可得x (p-1)+1=dpe,x∈(0,e),通过遍历x，可以求出p-1,进而求d。 7.已知dp,dq,p,q的攻击:相关链接https://mp.weixin.qq.com/s/eNerFn4Aw3l7xeVnnDxKpg 给定dp,dq,p,q,c,通过推导可得m≡(((m2-m1)*p-1 mod q)p+m1)mod n ,那么m1,m2怎么求呢？还是经过推导可得m1=cdp mod p,m2=cdq mod q","path":"2018/09/01/RSA/"},{"title":"安恒7月赛部分题writeup","text":"安恒7月赛相对较简单，本文章介绍了web1，web2，CRYPTO，MISC1的解题步骤 web1 order这是一题关于order的注入，很简单的哦！同学们尝试下注入吧！ 正好最近在学sql注入，感觉题目还是挺友好的，用burpsuit抓包 12345678910GET /?order=name&amp;button=submit HTTP/1.1Host: 101.71.29.5:10004User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://101.71.29.5:10004/?order=id&amp;button=submitCookie: Hm_lvt_d532469474a471feb9f849e2bf8fb4c1=1532150292; Hm_lpvt_d532469474a471feb9f849e2bf8fb4c1=1532150313Connection: keep-aliveUpgrade-Insecure-Requests: 1 判断应该是GET型注入，直接上sqlmap吧，在name后加“*”，用sqlmap跑一下，得到结果 flag{666_0rdorby_you_can} web2 就这么直接源代码都给你了 你想想办法吧！ 既然提示说给了源码，那就找找源码吧，进入靶机，右击查看源代码，发现hint.php,访问它，看到源代码，看不懂！！！和大佬学习了一下，大概意思是输入key,用key计算resault，然后输出，但是这个输出由于srand函数会很快地变化，然后测试一下，随便输入一个数，然后看源代码，发现后边给了答案，这应该就是resault的值，尝试输回去，发现不对，说明srand函数使答案的有效时间很短，嗯，是时候上脚本了 123456789101112131415161718192021222324252627282930import requestsimport redef get(): url=&apos;http://101.71.29.5:10003/flag.php&apos; data=&#123; &apos;answer&apos;:&apos;983f602ccd65e33d496fa6ebbdd7dad4&apos; &#125; r=requests.post(url,data=data) f = open(&quot;web2.txt&quot;, &apos;w&apos;) f.write(r.text) f.close() print(&quot;get success!&quot;)def getTitle(booktext): return re.search( r&apos;&lt;!--(.+?)--&gt;&apos;, booktext, re.M|re.I).group(1)def sent(): f = open(&quot;web2.txt&quot;, &apos;r&apos;) message = f.read() f.close() message = getTitle(message) print(message) url=&apos;http://101.71.29.5:10003/flag.php&apos; data=&#123; &apos;answer&apos;: message &#125; r=requests.post(url,data=data) print(r.text) print(&quot;post success!&quot;)if __name__ == &apos;__main__&apos;: get() sent() 脚本也是大佬给的，小萌新费劲巴力才看懂，感谢大佬！ 运行几次，获得flag。 crypto又是rsa！用hex 打开problem文件，得到n,e,c，发现e=3,可判断为低指数加密，发现c&lt;n,所以直接开三次方，但是精度不够，啊啊啊！精度！精度！精度！搜了一下发现gmpy2有提高精度的方法 得出精确的数之后，放到hex中得到flag。 misc1题目提到刷新，只能是F5啊，可是杂项和F5有什么关系啊，百度发现居然有F5隐写，直接利用工具 F5-steganography 1.下载地址：https://github.com/matthewgao/F5-steganography 2.进入F5-steganography-master文件夹，在空白处 ctrl+shift+鼠标右键-&gt;在此处打开命令窗口 3.在cmd中输入命令： java Extract 图片的绝对路径/123456.jpg -p abc123 4.查看output.txt，发现是乱码，放到hex中发现是Zip文件的格式，保存为Zip格式，解压，发现需要密码，首先考虑是不是伪加密，看504B0102后9到12位，发现不都是0，说明是伪加密，9到12位都变成0，解压，得到flag：flag{96efd0a2037d06f34199e921079778ee}","path":"2018/09/01/安恒7月赛部分题writeup/"},{"title":"SQL注入学习总结","text":"暑假报了学校的培训，还不要钱，感谢学校，感谢培训的老师！老师让用docker搭了靶机，自己在靶机上做了做试验，感觉还是挺有收获的，正好写篇文章总结总结。 post型注入常规的测试一下，发现有注入漏洞，F12查看参数 找到有两个显示位，通过命令查找库名，表明，获得数据 GET型注入发现有id参数，尝试使用联合查询 注入成功。 SEARCH型注入这个之前没见过，查了一下，发现应该是在数据库中查找东西，参数是keyword，尝试使用联合查询注入 成功！ 二次注入二次注入大概就是第一次注册的东西会存在数据库中，第二次只是调用库中的数据，尝试手注，失败了，上sqlmap吧，查看参数为my_id 这是前一周的成果，还有四周，我争取继续加油，嘿嘿！","path":"2018/09/01/sql注入学习总结/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2018/08/01/hello-world/"}]}